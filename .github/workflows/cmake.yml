name: CMake
on: [push, pull_request, workflow_dispatch]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci-cmake:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu GCC
            os: ubuntu-latest
            compiler: gcc

          # Test out of source builds
          - name: Ubuntu GCC OSB
            os: ubuntu-latest
            compiler: gcc
            build-dir: ../build
            src-dir: ../libpng

          - name: Ubuntu GCC -O3
            os: ubuntu-latest
            compiler: gcc
            cflags: -O3

          - name: Ubuntu Clang
            os: ubuntu-latest
            compiler: clang

          - name: Ubuntu Clang Debug
            os: ubuntu-latest
            compiler: clang
            build-config: Debug

          - name: Windows MSVC Win32
            os: windows-latest
            compiler: cl
            cmake-args: -A Win32

          - name: Windows MSVC Win64
            os: windows-latest
            compiler: cl
            cmake-args: -A x64

          - name: Windows GCC
            os: windows-latest
            compiler: gcc
            cmake-args: -G Ninja

          - name: macOS Clang
            os: macos-latest
            compiler: clang

          - name: macOS GCC
            os: macos-latest
            compiler: gcc

          - name: Open Watcom Win32
            os: windows-latest
            compiler: ow
            cmake-args: -G "Watcom WMake"

          - name: Open Watcom Linux
            os: ubuntu-latest
            compiler: ow
            cmake-args: -G "Watcom WMake"

          - name: Open Watcom OS/2
            os: ubuntu-latest
            compiler: ow-os2-32
            cmake-args: -G "Watcom WMake" -D CMAKE_SYSTEM_NAME=OS2 -D CMAKE_SYSTEM_PROCESSOR=x86

          - name: Open Watcom OS/2 (16-bit)
            os: ubuntu-latest
            compiler: ow-os2-16
            cmake-args: -G "Watcom WMake" -D CMAKE_SYSTEM_NAME=OS2 -D CMAKE_SYSTEM_PROCESSOR=I86
            build-config: MinSizeRel

          - name: Open Watcom DOS
            os: ubuntu-latest
            compiler: ow-dos
            cmake-args: -G "Watcom WMake" -D CMAKE_SYSTEM_NAME=DOS -D CMAKE_SYSTEM_PROCESSOR=x86

          - name: Open Watcom DOS (16-bit)
            os: ubuntu-latest
            compiler: ow-dos-16
            cmake-args: -G "Watcom WMake" -D CMAKE_SYSTEM_NAME=DOS -D CMAKE_SYSTEM_PROCESSOR=I86
            build-config: MinSizeRel

          - name: Open Watcom Windows
            os: ubuntu-latest
            compiler: ow-win-16
            cmake-args: -G "Watcom WMake" -D CMAKE_SYSTEM_NAME=Windows3x -D CMAKE_SYSTEM_PROCESSOR=I86
            build-config: MinSizeRel
    env:
      ZLIB_LIBRARY: ${{ github.workspace }}/zlib/1.3.1/lib
      ZLIB_INCLUDE_DIR: ${{ github.workspace }}/zlib/1.3.1/include

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get zlib
      uses: "./.github/actions/zlib"
      with:
        subdir:     zlib
        version:    '1.3.1'

    - name: Open Watcom setup
      if: startsWith( matrix.compiler, 'ow' )
      uses: open-watcom/setup-watcom@v0
      with:
        version: "2.0-64"

    - name: Build zlib (x86/x86-64)
      if: matrix.arch == 'x86' || matrix.arch == 'x64'
      shell: cmd
      run: |
        cd ${{ github.workspace }}/zlib/1.3.1
        cmake .
        nmake -f win32\Makefile.msc

    - name: Build zlib (arm32/arm64)
      if: matrix.arch == 'x64_arm' || matrix.arch == 'x64_arm64'
      shell: cmd
      run: |
        cd ${{ github.workspace }}/zlib/1.3.1
        cmake . -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release
        nmake

    - name: Generate project files
      if: ${{ ! startsWith( matrix.compiler, 'ow' ) }}
      run: |
        mkdir ${{ matrix.build-dir || 'build' }}
        cmake -S ${{ matrix.src-dir || '.' }} -B ${{ matrix.build-dir || 'build' }} ${{ matrix.cmake-args }} -D CMAKE_BUILD_TYPE=${{ matrix.build-config || 'Release' }}
      env:
        CC: ${{ matrix.compiler }}
        CFLAGS: ${{ matrix.cflags }}
    
    - name: Generate project files
      if: startsWith( matrix.compiler, 'ow' )
      run: |
        mkdir ${{ matrix.build-dir || 'build' }}
        cmake -S ${{ matrix.src-dir || '.' }} -B ${{ matrix.build-dir || 'build' }} ${{ matrix.cmake-args }} -D WATCOM_CFLAGS=${{ matrix.cflags || '' }} -D CMAKE_BUILD_TYPE=${{ matrix.build-config || 'Release' }}

    - name: Compile source code
      run: cmake --build ${{ matrix.build-dir || 'build' }} --config ${{ matrix.build-config || 'Release' }}

    - name: Run test cases
      if: ${{ ! startsWith( matrix.compiler, 'ow-' ) }}
      run: ctest -C Release --output-on-failure --max-width 120
      working-directory: ${{ matrix.build-dir || 'build' }}

    - name: Upload build errors
      if: failure() || startsWith( matrix.compiler, 'ow' )
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.compiler }}(${{ matrix.os }})
        path: |
          ${{ matrix.build-dir || 'build' }}/**
